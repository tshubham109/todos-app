{"version":3,"sources":["Component/Todositem.js","Component/Todos.js","Component/Layout/Header.js","Component/AddTodos.js","Component/Pages/About.js","App.js","serviceWorker.js","index.js"],"names":["Todositem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodos","Component","color","border","borderRadius","cursor","float","Todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodos","state","e","setState","target","name","value","onSubmit","preventDefault","addtodos","display","flex","placeholder","className","About","App","todos","axios","delete","then","res","filter","post","data","get","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10cc5399.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n class Todositem extends Component {\r\n     getStyle=()=>{\r\n         return {\r\n             background:'#f4f4f4',\r\n             padding:'10px',\r\n             borderBottom:'1px #ccc dotted',\r\n             textDecoration: this.props.todo.completed? 'Line-through':'none'\r\n         }\r\n     }\r\n    render() {\r\n        const{id,title}=this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n               \r\n               <p>  <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{\"  \"}\r\n                   {title}\r\n                   <button style={btnStyle} onClick={this.props.delTodos.bind(this,id)}>x</button>\r\n                </p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodositem.propTypes={\r\n    todo:PropTypes.object.isRequired,\r\n    markComplete:PropTypes.func.isRequired,\r\n    delTodos:PropTypes.func.isRequired\r\n}\r\nconst btnStyle={\r\n    background:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    borderRadius:'50%',\r\n    cursor:'pointer',\r\n    float:'right'\r\n\r\n}\r\n\r\nexport default Todositem\r\n","import React, { Component } from 'react'\r\nimport Todositem from './Todositem'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Todos extends Component {\r\n    render() {\r\n       \r\n        \r\n        return this.props.todo.map((todo)=>\r\n        <Todositem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n        delTodos={this.props.delTodos}/>\r\n        )\r\n    }\r\n}\r\nTodos.propTypes={\r\n    todo:PropTypes.array.isRequired,\r\n    markComplete:PropTypes.func.isRequired,\r\n    delTodos:PropTypes.func.isRequired\r\n}\r\nexport default Todos\r\n","import React from 'react'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>My Todos app</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link>|<Link style={linkStyle} to=\"/about\">About</Link>\r\n           \r\n        </header>\r\n    )\r\n}\r\nconst headerStyle={\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:\"10px\"\r\n}\r\nconst linkStyle={\r\n    color:\"#fff\",\r\n    textDecoration:\"none\"\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\n\r\nexport class AddTodos extends Component {\r\n    state={\r\n        title:\"\"\r\n    }\r\n    onChange=(e)=>{\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n    onSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.addtodos(this.state.title)\r\n        this.setState({title:\"\"})\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n                <form onSubmit={this.onSubmit}style={{display:\"flex\"}}>\r\n                    <input type=\"text\" \r\n                    style={{flex:\"10\",padding:'5px'}}\r\n                    name=\"title\" placeholder=\"add todos\"\r\n                    value={this.state.title} onChange={this.onChange}/>\r\n                    <input type=\"submit\"value=\"submit\"\r\n                    className=\"btn\"\r\n                    style={{flex:\"1\"}}/>\r\n                </form>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodos\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <>\r\n        <p>this is 1.0.0 version of the todos app</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React, { Component } from 'react'\nimport {BrowserRouter as Router,Route} from 'react-router-dom'\nimport Todos from './Component/Todos'\nimport './App.css';\nimport Header from'./Component/Layout/Header'\nimport AddTodos from'./Component/AddTodos'\n//import {v4 as uuid} from \"uuid\"\nimport About from './Component/Pages/About'\nimport axios from 'axios'\n\n class App extends Component {\n   state={\n     todos:[] \n     \n   }\n   componentDidMount(){\n     axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n     .then(res=>this.setState({todos:res.data}))\n\n   }\n   markComplete=(id)=>{\n     this.setState({\n       todos:this.state.todos.map((todo)=>{\n         if(todo.id===id){\n          todo.completed=!todo.completed\n         }\n         return todo;\n       })\n       \n     })\n   }\n   //delete todo\n   delTodos=(id)=>{\n     axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res=>{this.setState({\n      todos:[...this.state.todos.filter((todo)=>todo.id!==id)]\n    })})\n     \n   }\n   //add todos\n   addtodos=(title)=>\n   { axios.post('https://jsonplaceholder.typicode.com/todos',{title:title,\n  completed:false}).then(res=>{this.setState({\n    todos:[...this.state.todos,res.data] \n   })})\n   }\n     \n   \n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n        <div className=\"container\">\n        <Header/>\n        <Route exact path=\"/\" render={props=>(\n          <React.Fragment>\n            <AddTodos addtodos={this.addtodos}/>\n              <Todos todo={this.state.todos} markComplete={this.markComplete}\n                delTodos={this.delTodos}/>\n          </React.Fragment>\n        )}/>\n        <Route path=\"/about\" component={About}/>\n        \n        </div>\n        \n      </div>\n      </Router>\n      \n    )\n  }\n}\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}